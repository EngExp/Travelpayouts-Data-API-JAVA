/*
 * TravelpayoutsDataAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/03/2016
 */
package com.travelpayouts.api.controllers;

import java.io.IOException;
import java.lang.reflect.ParameterizedType;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

import com.travelpayouts.api.APIHelper;
import com.travelpayouts.api.http.client.APIStreamingCallBack;
import com.travelpayouts.api.http.client.HttpClient;
import com.travelpayouts.api.http.response.HttpResponse;

public abstract class BaseStreamController<T extends Object> extends BaseController {

    private Boolean isCancelled = false;
    private HttpResponse responseToRead = null;

    //for creating json parser
    private JsonFactory jfactory = new JsonFactory();
    
    /**
     * Initialize with the default http client
     */
    public BaseStreamController() {
        super();
    }

    /**
     * Is the current stream response currently open
     */
    public Boolean isOpen()
    {
        return (responseToRead != null);
    }

    /**
     * Close the current stream response
     */
    public void close()
    {
        isCancelled = true;

        if(isOpen()) {
            responseToRead.shutdown();
        }
    }

    /**
     * Stream reader for collecting streaming response data
     *
     * @param   callback    The callback for handling streaming response events
     * @param   response    The response to extract the stream for reading the data
     * @throws InterruptedException 
     */
    void initializeStreamReader(APIStreamingCallBack<T> callback, HttpResponse response) throws IOException, InterruptedException {
        try{
            isCancelled = false;
            responseToRead = response;

            //read from the stream using this parser
            JsonParser streamReader = jfactory.createParser(response.getRawBody());

            //force close the underlying stream when reader is closed
            streamReader.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);

            //get the class type reference for deserialization
            @SuppressWarnings("unchecked")
            Class<T> persistentClass = (Class<T>)
                       ((ParameterizedType)getClass().getGenericSuperclass())
                          .getActualTypeArguments()[0];

            // continue parsing the token till the end of input is reached
            while (!streamReader.isClosed()) {
                
                // get the token
                JsonToken token = streamReader.nextToken();
                // if its the last token then we are done
                if (token == null)
                    break;
                
                //start of a new json object
                if (token == JsonToken.START_OBJECT)
                {
                    //extract result from the http response stream parser
                    T obj = APIHelper.deserialize(streamReader, persistentClass);

                    //notify all event listeners
                    callback.onDataArrival(this, obj);
                }
            }
        } catch(IOException ioException){
            //IO exceptions may be raised when forcefully closing, so ignore
            if(!isCancelled)
                throw ioException;
        } finally{
            responseToRead.shutdown();
            responseToRead = null;
            //notify that the stream has been closed
            callback.onStreamClosed(this);
        }
    }
}
