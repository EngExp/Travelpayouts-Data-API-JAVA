/*
 * TravelpayoutsDataAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/03/2016
 */
package com.travelpayouts.api.models;

import java.util.*;

public class ThePricesForTheAlternativeDirectionsPriceModelBuilder 
        extends ThePricesForTheAlternativeDirectionsModelBuilder {
    //the instance to build
    private ThePricesForTheAlternativeDirectionsPriceModel thePricesForTheAlternativeDirectionsPriceModel;

    /**
     * Default constructor to initialize the instance
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder() {
        thePricesForTheAlternativeDirectionsPriceModel = new ThePricesForTheAlternativeDirectionsPriceModel();
    }

    /**
     * the cost of a flight, in the currency specified
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder value(String value) {
        thePricesForTheAlternativeDirectionsPriceModel.setValue(value);
        return this;
    }

    /**
     * the flight class. 0 — the economy class, 1 — the business class, 2 — the first class.
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder tripClass(int tripClass) {
        thePricesForTheAlternativeDirectionsPriceModel.setTripClass(tripClass);
        return this;
    }

    /**
     * false — all the prices, true — just the prices, found using the partner marker (recommended)
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder showToAffiliates(boolean showToAffiliates) {
        thePricesForTheAlternativeDirectionsPriceModel.setShowToAffiliates(showToAffiliates);
        return this;
    }

    /**
     * the date of return
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder returnDate(String returnDate) {
        thePricesForTheAlternativeDirectionsPriceModel.setReturnDate(returnDate);
        return this;
    }

    /**
     * the point of departure
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder origin(String origin) {
        thePricesForTheAlternativeDirectionsPriceModel.setOrigin(origin);
        return this;
    }

    /**
     * the number of transfers
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder numberOfChanges(int numberOfChanges) {
        thePricesForTheAlternativeDirectionsPriceModel.setNumberOfChanges(numberOfChanges);
        return this;
    }

    /**
     * the agents, which was found in the ticket
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder gate(String gate) {
        thePricesForTheAlternativeDirectionsPriceModel.setGate(gate);
        return this;
    }

    /**
     * the time and the date, for which a ticket was found
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder foundAt(String foundAt) {
        thePricesForTheAlternativeDirectionsPriceModel.setFoundAt(foundAt);
        return this;
    }

    /**
     * flight duration in minutes, taking into account direct and expectations
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder duration(String duration) {
        thePricesForTheAlternativeDirectionsPriceModel.setDuration(duration);
        return this;
    }

    /**
     * the distance between the point of departure and the point of destination
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder distance(int distance) {
        thePricesForTheAlternativeDirectionsPriceModel.setDistance(distance);
        return this;
    }

    /**
     * the point of destination
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder destination(String destination) {
        thePricesForTheAlternativeDirectionsPriceModel.setDestination(destination);
        return this;
    }

    /**
     * the date of departure
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder departDate(String departDate) {
        thePricesForTheAlternativeDirectionsPriceModel.setDepartDate(departDate);
        return this;
    }

    /**
     * the actuality of an offer
     */
    public ThePricesForTheAlternativeDirectionsPriceModelBuilder actual(boolean actual) {
        thePricesForTheAlternativeDirectionsPriceModel.setActual(actual);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public ThePricesForTheAlternativeDirectionsPriceModel build() {
        return thePricesForTheAlternativeDirectionsPriceModel;
    }
}