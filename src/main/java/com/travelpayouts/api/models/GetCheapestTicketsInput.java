/*
 * TravelpayoutsDataAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/03/2016
 */
package com.travelpayouts.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class GetCheapestTicketsInput 
        implements java.io.Serializable {
    private static final long serialVersionUID = 5517157196179642716L;
    private String currency = "RUB";
    private String origin = "HKT";
    private String destination;
    private Date departDate;
    private Date returnDate;
    private String page;
    /** GETTER
     * Currency of prices
     */
    @JsonGetter("currency")
    public String getCurrency ( ) { 
        return this.currency;
    }
    
    /** SETTER
     * Currency of prices
     */
    @JsonSetter("currency")
    public void setCurrency (String value) { 
        this.currency = value;
    }
 
    /** GETTER
     * IATA code of the departure city. IATA code is shown by uppercase letters,
     */
    @JsonGetter("origin")
    public String getOrigin ( ) { 
        return this.origin;
    }
    
    /** SETTER
     * IATA code of the departure city. IATA code is shown by uppercase letters,
     */
    @JsonSetter("origin")
    public void setOrigin (String value) { 
        this.origin = value;
    }
 
    /** GETTER
     * IATA code of the destination city (for all routes, enter "-"). IATA code is shown by uppercase letters
     */
    @JsonGetter("destination")
    public String getDestination ( ) { 
        return this.destination;
    }
    
    /** SETTER
     * IATA code of the destination city (for all routes, enter "-"). IATA code is shown by uppercase letters
     */
    @JsonSetter("destination")
    public void setDestination (String value) { 
        this.destination = value;
    }
 
    /** GETTER
     * Day or month of departure (yyyy-mm-dd or yyyy-mm).
     */
    @JsonGetter("depart_date")
    public Date getDepartDate ( ) { 
        return this.departDate;
    }
    
    /** SETTER
     * Day or month of departure (yyyy-mm-dd or yyyy-mm).
     */
    @JsonSetter("depart_date")
    public void setDepartDate (Date value) { 
        this.departDate = value;
    }
 
    /** GETTER
     * Day or month of return (yyyy-mm-dd or yyyy-mm).
     */
    @JsonGetter("return_date")
    public Date getReturnDate ( ) { 
        return this.returnDate;
    }
    
    /** SETTER
     * Day or month of return (yyyy-mm-dd or yyyy-mm).
     */
    @JsonSetter("return_date")
    public void setReturnDate (Date value) { 
        this.returnDate = value;
    }
 
    /** GETTER
     * Is used to display the found data (by default the page displays 100 found prices. If the destination isn't selected, there can be more data. In this case, use the page, to display the next set of data, for example, page=2).
     */
    @JsonGetter("page")
    public String getPage ( ) { 
        return this.page;
    }
    
    /** SETTER
     * Is used to display the found data (by default the page displays 100 found prices. If the destination isn't selected, there can be more data. In this case, use the page, to display the next set of data, for example, page=2).
     */
    @JsonSetter("page")
    public void setPage (String value) { 
        this.page = value;
    }
 
}
 