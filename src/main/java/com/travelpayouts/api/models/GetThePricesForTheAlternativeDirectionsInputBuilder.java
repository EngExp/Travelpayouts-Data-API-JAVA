/*
 * TravelpayoutsDataAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/03/2016
 */
package com.travelpayouts.api.models;

import java.util.*;

public class GetThePricesForTheAlternativeDirectionsInputBuilder {
    //the instance to build
    private GetThePricesForTheAlternativeDirectionsInput getThePricesForTheAlternativeDirectionsInput;

    /**
     * Default constructor to initialize the instance
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder() {
        getThePricesForTheAlternativeDirectionsInput = new GetThePricesForTheAlternativeDirectionsInput();
    }

    /**
     * the airline tickets currency
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder currency(String currency) {
        getThePricesForTheAlternativeDirectionsInput.setCurrency(currency);
        return this;
    }

    /**
     * the point of departure. The IATA city code or the country code. The length - from 2 to 3 symbols
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder origin(String origin) {
        getThePricesForTheAlternativeDirectionsInput.setOrigin(origin);
        return this;
    }

    /**
     * the point of destination. The IATA city code or the country code. The length - from 2 to 3 symbols
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder destination(String destination) {
        getThePricesForTheAlternativeDirectionsInput.setDestination(destination);
        return this;
    }

    /**
     * day or month of departure (yyyy-mm-dd or yyyy-mm).
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder departDate(String departDate) {
        getThePricesForTheAlternativeDirectionsInput.setDepartDate(departDate);
        return this;
    }

    /**
     * day or month of return (yyyy-mm-dd or yyyy-mm).
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder returnDate(String returnDate) {
        getThePricesForTheAlternativeDirectionsInput.setReturnDate(returnDate);
        return this;
    }

    /**
     * false - all the prices, true - just the prices, found using the partner marker (recommended)
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder showToAffiliates(Boolean showToAffiliates) {
        getThePricesForTheAlternativeDirectionsInput.setShowToAffiliates(showToAffiliates);
        return this;
    }

    /**
     * the number of variants entered, from 1 to 20. Where 1 – is just the variant with the specified points of departure and the points of destination
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder limit(String limit) {
        getThePricesForTheAlternativeDirectionsInput.setLimit(limit);
        return this;
    }

    /**
     * expansion of the range of dates upward or downward. The value may vary from 0 to 7, where 0 shall show the variants for the dates specified, 7 – all the variants found for a week prior to the specified dates and a week after
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder flexibility(String flexibility) {
        getThePricesForTheAlternativeDirectionsInput.setFlexibility(flexibility);
        return this;
    }

    /**
     * the number of variants entered, from 1 to 20. Where 1 – is just the variant with the specified points of departure and the points of destination
     */
    public GetThePricesForTheAlternativeDirectionsInputBuilder distance(String distance) {
        getThePricesForTheAlternativeDirectionsInput.setDistance(distance);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public GetThePricesForTheAlternativeDirectionsInput build() {
        return getThePricesForTheAlternativeDirectionsInput;
    }
}